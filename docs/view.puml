@startuml MainWindow

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class MainWindow
{
    - model : Model*
    - createComponentDialog : CreateComponentDialog*
    - settingsDialog : SettingsDialog*
    - menuBar : QMenuBar*
    - centralSplitter : QSplitter*
    - componentEditorWidget : QWidget*
    - componentEditorLayout : QVBoxLayout*
    - listSegmentWidget : QWidget*
    - listSegmentLayout : QVBoxLayout*
    - buildSplitter : QSplitter*
    - componentEditorToolBar : QToolBar*
    - listSegmentToolBar : QToolBar*
    - buildToolBar : QToolBar*
    - toolBox : QToolBox*
    - listWidget : QListWidget*
    - sourceTextBrowser : QTextBrowser*
    - compileOutputBrowser : QTextBrowser*
    - procedureWidgets : QVector<ProcedureWidget*>
    - enumeratorWidgets : QVector<EnumeratorWidget*>
    - structWidgets : QVector<StructWidget*>
    - createComponentAction : QAction*
    - deleteComponentAction : QAction*
    - deleteListItemAction : QAction*
    - createCodeBlockAction : QAction*
    - generateAction : QAction*
    - runAction : QAction*
    - buildAction : QAction*
    - stopCompileAction : QAction*
    - settingsAction : QAction*
    - newProjectAction : QAction*
    - saveProjectAction : QAction*
    - loadProjectAction : QAction*
--
    + MainWindow(QWidget *parent)
    + ~MainWindow()
    - initDialogs() : void
    - initActions() : void
    - initMenuBar() : void
    - initComponentEditorSegment() : void
    - initListSegment() : void
    - initSourceSegment() : void
    - showDiscardWarning() : bool
.. <<slots>> ..
    - showCreateComponentDialog() : void
    - createComponent() : void
    - deleteComponent() : void
    - addListItem(QString componentName, int componentID) : void
    - deleteListItem(int id) : void
    - deleteListItem() : void
    - createCodeBlock() : void
    - showSettingsDialog() : void
    - updateSettings() : void
    - generateSource() : void
    - modelRun() : void
    - modelCompile() : void
    - modelStopCompile() : void
    - showCompileOutput(QString output) : void
    - allowCompile() : void
    - showCompilerPathWarning() : void
    - listItemChanged(QListWidgetItem* item) : void
    - changeSelectedComponent() : void
    - newProject() : void
    - loadProject() : void
    - saveProject() : void
    - showProjectSaveDialog() : void
    - showProjectOpenDialog() : void
    - refresh(const SaveData& data) : void
    - clear() : void
}

@enduml

@startuml ComponentWidget

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class ComponentWidget
{
    - name : QString
    - objectNameApproved : bool
    - members : QVector<MemberWidget*>
    - customMethods : QVector<CustomMethodWidget*>
    - nameLabel : QLabel*
    - parentClassLabel : QLabel*
    - memberLayout : QVBoxLayout*
    - customMethodLayout : QVBoxLayout*
    # type : ComponentType
    # id : const int
    # model : Model*
    # gridlayout : QGridLayout*
    # vboxlayout : QVBoxLayout*
    # objectNameLabel : QLabel*
    # objectNameLineEdit : QLineEdit*
    # itemTypeLabel : QLabel*
    # itemTypeLineEdit : QLineEdit*
    # destructorLabel : QLabel*
    # destructorTextEdit : PopUpTextEdit*
--
    - initSegments() : void
    # checkRequiredBase() : bool
    # connectSignals() : void
    # createMember(int id, QString type, QString name) : void
    # createCustomMethod(int id, QString header, QString body) : void
    # createMembers(QMap<int,Member> members) : void
    # createCustomMethods(QMap<int,CustomMethod> customMethods) : void
    + ComponentWidget(int id, QString name, ComponentType type, Model* model, QWidget *parent)
    + getName() : QString
    + getType() : ComponentType
    + getID() : int
    + checkRequired() : bool {virtual}
.. <<slots>> ..
    - onAddNewMemberClicked() : void
    - onAddNewMethodClicked() : void
    - memberChanged() : void
    - methodChanged() : void
    - objectNameChanged() : void
    - itemTypeChanged() : void
    - deleteMember() : void
    - deleteMethod() : void
    - popUpTextChanged() : void
}

@enduml

@startuml EnumeratorWidget

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class EnumeratorWidget
{
    - initSegments() : void
    - connectSignals() : void
    - firstLabel : QLabel*
    - firstTextEdit : PopUpTextEdit*
    - nextLabel : QLabel*
    - nextTextEdit : PopUpTextEdit*
    - endLabel : QLabel*
    - endTextEdit : PopUpTextEdit*
    - currentLabel : QLabel*
    - currentTextEdit : PopUpTextEdit*

    + EnumeratorWidget(int id, QString name, ComponentType type, Model* model, QWidget *parent)
    + EnumeratorWidget(const Component& component, Model* model, QWidget *parent)
    + checkRequired() : bool
}

@enduml

@startuml ProcedureWidget

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class ProcedureWidget
{
    - useInMainLabel : QLabel*
    - useInMainCheckBox : QCheckBox*
    - enorLabel : QLabel*
    - enorComboBox : QComboBox*
    - optimistLabel : QLabel*
    - optimistCheckBox : QCheckBox*
    - valueLabel : QLabel*
    - valueLineEdit : QLineEdit*
    - compareLabel : QLabel*
    - greaterRadioButton : QRadioButton*
    - lessRadioButton : QRadioButton*
    - neutralLabel : QLabel*
    - neutralTextEdit : PopUpTextEdit*
    - addLabel : QLabel*
    - addTextEdit : PopUpTextEdit*
    - funcLabel : QLabel*
    - funcTextEdit : PopUpTextEdit*
    - condLabel : QLabel*
    - condTextEdit : PopUpTextEdit*
    - firstLabel : QLabel*
    - firstTextEdit : PopUpTextEdit*
    - whileCondLabel : QLabel*
    - whileCondTextEdit : PopUpTextEdit*
--
    - initSegments() : void
    - connectSignals() : void
    + ProcedureWidget(int id, QString name, ComponentType type, Model* model, QWidget *parent)
    + ProcedureWidget(const Component& component, Model* model, QWidget *parent)
    + addEnumeratorChoice(QString enumeratorName, int enumeratorID) : void
    + removeEnumeratorChoice(int enumeratorID) : void
    + selectEnumerator(QString enumeratorName) : void
    + checkRequired() : bool
.. <<slots>> ..
    - useInMainChanged() : void
    - enorChanged(int index) : void
    - optimistChanged() : void
    - valueChanged() : void
    - compareChanged() : void
.. <<signals>> ..
    + useInMainChecked(QString componentName, int componentID) : void
    + useInMainUnchecked(int componentID) : void
}

@enduml

@startuml StructWidget

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class StructWidget
{
    - name : QString
    - members : QVector<MemberWidget*>
    - customMethods : QVector<CustomMethodWidget*>
    - nameLabel : QLabel*
    - structLabel : QLabel*
    - memberLayout : QVBoxLayout*
    - customMethodLayout : QVBoxLayout*
    # id : const int
    # model : Model*
    # gridlayout : QGridLayout*
    # vboxlayout : QVBoxLayout*
--
    + StructWidget(int id, QString name, Model* model, QWidget *parent)
    + StructWidget(const Struct& _struct, Model* model, QWidget *parent)
    + getName() : QString
    + getID() : int
    - initSegments() : void
    - createMember(int id, QString type, QString name) : void
    - createCustomMethod(int id, QString header, QString body) : void
    - createMembers(QMap<int,Member> members) : void
    - createCustomMethods(QMap<int,CustomMethod> customMethods) : void
.. <<slots>> ..
    - onAddNewMemberClicked() : void
    - onAddNewMethodClicked() : void
    - memberChanged() : void
    - methodChanged() : void
    - deleteMember() : void
    - deleteMethod() : void
}

@enduml

@startuml CreateComponentDialogMode

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

enum CreateComponentDialogMode{
    PROCEDURE
    ENUMERATOR
}

@enduml

@startuml CreateComponentDialog

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class CreateComponentDialog
{
    - model : Model*
    - okButton : QPushButton*
    - cancelButton : QPushButton*
    - nameLineEdit : QLineEdit*
    - componentTypeSelect : QComboBox*
    - errorLabel : QLabel*
--
    + CreateComponentDialog(Model* model);
    + getName() : QString
    + getComponent() : QVariant
    + clear() : void
.. <<slots>> ..
    - wantToAccept() : void
}

@enduml

@startuml CustomMethodWidget

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class CustomMethodWidget
{
    - id : const int 
    - headerLineEdit : QLineEdit*
    - bodyPopUpTextEdit : PopUpTextEdit*
    - deleteButton : QPushButton*
    - hboxlayout : QHBoxLayout*
    - vboxlayout : QVBoxLayout*
--
    + CustomMethodWidget(int id, QString header, QString body, QWidget *parent)
    + getHeader() : QString
    + getBody() : QString
    + getID() : int
.. <<signals>> ..
    + edited() : void
    + deleteMe() : void
}

@enduml

@startuml MemberWidget

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class MemberWidget
{
    - id : const int
    - typeLineEdit : QLineEdit*
    - nameLineEdit : QLineEdit*
    - deleteButton : QPushButton*
    - hboxlayout : QHBoxLayout*
--
    + MemberWidget(const int id, QWidget *parent)
    + MemberWidget(const int id, QString type, QString name, QWidget *parent)
    + getType() : QString
    + getName() : QString
    + getID() : int
.. <<signals>> ..
    - edited() : void
    - deleteMe() : void
}

@enduml

@startuml PopUpTextEdit

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class PopUpTextEdit
{
    - methodType : MethodType
    - inputDialog : TextInputDialog*
--
    + PopUpTextEdit()
    + PopUpTextEdit(MethodType methodType)
    + getMethodType() : MethodType
    # focusInEvent(QFocusEvent *e) : void {override}
.. <<slots>> ..
    - getTextFromInputDialog() : void
.. <<signals>> ..
    + textChanged() : void
}

@enduml

@startuml SettingsDialog

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class SettingsDialog
{
    - okButton : QPushButton*
    - cancelButton : QPushButton*
    - compilerPathLineEdit : QLineEdit*
    - argumentsLineEdit : QLineEdit*

    + SettingsDialog()
    + getCompilerPath() : QString
    + getArguments() : QString
    + setCompilerPath(QString compilerPath) : void
    + setArguments(QString compilerArguments) : void
}

@enduml

@startuml TextInputDialog

skinparam Monochrome true
skinparam ClassAttributeIconSize 0
hide circle
hide enum methods

class TextInputDialog
{
    - textEdit : QTextEdit*
    - saveButton : QPushButton*
    - cancelButton : QPushButton*
--
    - using QDialog::exec;
    + TextInputDialog();
    + getText() : QString
    + exec(QString text) : void
}

@enduml